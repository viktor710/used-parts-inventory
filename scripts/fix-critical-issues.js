/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –ó–∞–ø—É—Å–∫: node scripts/fix-critical-issues.js
 */

const fs = require('fs');
const path = require('path');

// –§–∞–π–ª—ã —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
const filesWithDebugLogs = [
  'app/parts/page.tsx',
  'app/cars/page.tsx',
  'hooks/useStats.ts',
  'components/layout/Sidebar.tsx',
  'utils/cn.ts',
  'components/ui/AutocompleteOptimized.tsx',
  'components/ui/ImageUpload.tsx',
  'components/ui/ImageGallery.tsx',
  'components/ui/PartImage.tsx',
  'app/page.tsx',
  'app/cars/new/page.tsx',
  'app/parts/new/page.tsx'
];

// –§–∞–π–ª—ã API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
const apiFiles = [
  'app/api/parts/route.ts',
  'app/api/cars/route.ts',
  'app/api/upload/route.ts',
  'app/api/zapchasti/search/route.ts',
  'app/api/stats/route.ts'
];

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ
 */
function fixDebugLogs(filePath) {
  try {
    const fullPath = path.join(__dirname, '..', filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return false;
    }

    let content = fs.readFileSync(fullPath, 'utf8');
    let modified = false;

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ console.log
    const patterns = [
      /console\.log\s*\(\s*['"`]üîß\s*\[DEBUG\].*?['"`].*?\)/g,
      /console\.log\s*\(\s*['"`]üîß\s*\[DEBUG\].*?['"`]\s*,/g,
      /console\.log\s*\(\s*['"`]üîß\s*\[DEBUG\].*?['"`]\s*\)/g
    ];

    patterns.forEach(pattern => {
      const matches = content.match(pattern);
      if (matches) {
        matches.forEach(match => {
          // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —É—Å–ª–æ–≤–Ω—ã–π console.log
          const replacement = match.replace(
            /console\.log\s*\(\s*(['"`]üîß\s*\[DEBUG\].*?['"`].*?)\)/,
            'if (process.env.NODE_ENV === \'development\') {\n  console.log($1);\n}'
          );
          content = content.replace(match, replacement);
          modified = true;
        });
      }
    });

    if (modified) {
      fs.writeFileSync(fullPath, content, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –≤: ${filePath}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: ${filePath}`);
      return false;
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return false;
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ API —Ñ–∞–π–ª
 */
function addErrorHandling(filePath) {
  try {
    const fullPath = path.join(__dirname, '..', filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return false;
    }

    let content = fs.readFileSync(fullPath, 'utf8');
    let modified = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (content.includes('catch (error)')) {
      console.log(`‚ÑπÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É–∂–µ –µ—Å—Ç—å –≤: ${filePath}`);
      return false;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
    const functionPattern = /export async function (GET|POST|PUT|DELETE)\s*\([^)]*\)\s*\{/g;
    
    content = content.replace(functionPattern, (match, method) => {
      return `${match}\n  try {`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º catch –±–ª–æ–∫–∏
    const tryPattern = /try\s*\{/g;
    let tryCount = 0;
    
    content = content.replace(tryPattern, (match) => {
      tryCount++;
      return match;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º catch –±–ª–æ–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ try
    const lines = content.split('\n');
    const newLines = [];
    let braceCount = 0;
    let inTryBlock = false;

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      newLines.push(line);

      if (line.includes('try {')) {
        inTryBlock = true;
        braceCount = 0;
      }

      if (inTryBlock) {
        if (line.includes('{')) braceCount++;
        if (line.includes('}')) braceCount--;

        if (braceCount === 0 && inTryBlock) {
          // –î–æ–±–∞–≤–ª—è–µ–º catch –±–ª–æ–∫
          newLines.push('  } catch (error) {');
          newLines.push('    console.error(`‚ùå [ERROR] API ${method}:`, error);');
          newLines.push('    return NextResponse.json(');
          newLines.push('      { ');
          newLines.push('        success: false, ');
          newLines.push('        error: \'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\' ');
          newLines.push('      },');
          newLines.push('      { status: 500 }');
          newLines.push('    );');
          newLines.push('  }');
          inTryBlock = false;
        }
      }
    }

    const newContent = newLines.join('\n');
    
    if (newContent !== content) {
      fs.writeFileSync(fullPath, newContent, 'utf8');
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤: ${filePath}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤: ${filePath}`);
      return false;
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ API —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return false;
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
function fixValidationIssues() {
  try {
    const validationPath = path.join(__dirname, '..', 'lib/validation.ts');
    
    if (!fs.existsSync(validationPath)) {
      console.log('‚ö†Ô∏è  –§–∞–π–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    let content = fs.readFileSync(validationPath, 'utf8');
    let modified = false;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
    if (content.includes('(schema as any).partial()')) {
      content = content.replace(
        /const result = \(schema as any\)\.partial\(\)\.parse\(data\);/,
        'const result = schema.partial().parse(data);'
      );
      modified = true;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ null/undefined
    if (content.includes('(error as z.ZodError).issues')) {
      content = content.replace(
        /const errors = \(error as z\.ZodError\)\.issues\.map\(issue => issue\.message\);/g,
        'const errors = error instanceof z.ZodError ? error.issues.map(issue => issue.message) : [\'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\'];'
      );
      modified = true;
    }

    if (modified) {
      fs.writeFileSync(validationPath, content, 'utf8');
      console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π');
      return true;
    } else {
      console.log('‚ÑπÔ∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return false;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è rate limiting
 */
function createRateLimitMiddleware() {
  try {
    const middlewarePath = path.join(__dirname, '..', 'middleware.ts');
    
    if (fs.existsSync(middlewarePath)) {
      console.log('‚ÑπÔ∏è  Middleware —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return false;
    }

    const middlewareContent = `import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// –ü—Ä–æ—Å—Ç–æ–π rate limiting
const rateLimitMap = new Map<string, { count: number; resetTime: number }>();

const RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç
const RATE_LIMIT_MAX = 100; // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤

export function middleware(request: NextRequest) {
  // –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting —Ç–æ–ª—å–∫–æ –∫ API –º–∞—Ä—à—Ä—É—Ç–∞–º
  if (request.nextUrl.pathname.startsWith('/api/')) {
    const ip = request.ip || 'unknown';
    const now = Date.now();
    
    const rateLimit = rateLimitMap.get(ip);
    
    if (!rateLimit || now > rateLimit.resetTime) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π rate limit
      rateLimitMap.set(ip, {
        count: 1,
        resetTime: now + RATE_LIMIT_WINDOW
      });
    } else {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      rateLimit.count++;
      
      if (rateLimit.count > RATE_LIMIT_MAX) {
        return NextResponse.json(
          { success: false, error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤' },
          { status: 429 }
        );
      }
    }
  }
  
  return NextResponse.next();
}

export const config = {
  matcher: '/api/:path*',
};
`;

    fs.writeFileSync(middlewarePath, middlewareContent, 'utf8');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω middleware –¥–ª—è rate limiting');
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ middleware:', error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function fixCriticalIssues() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º...\n');

  let fixedFiles = 0;
  let totalIssues = 0;

  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
  console.log('üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤:');
  for (const file of filesWithDebugLogs) {
    if (fixDebugLogs(file)) {
      fixedFiles++;
    }
    totalIssues++;
  }

  // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ API
  console.log('\nüõ°Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ API:');
  for (const file of apiFiles) {
    if (addErrorHandling(file)) {
      fixedFiles++;
    }
    totalIssues++;
  }

  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π:');
  if (fixValidationIssues()) {
    fixedFiles++;
  }
  totalIssues++;

  // 4. –°–æ–∑–¥–∞–µ–º middleware –¥–ª—è rate limiting
  console.log('\nüö¶ –°–æ–∑–¥–∞–Ω–∏–µ rate limiting middleware:');
  if (createRateLimitMiddleware()) {
    fixedFiles++;
  }
  totalIssues++;

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${fixedFiles}/${totalIssues}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${Math.round((fixedFiles / totalIssues) * 100)}%`);

  if (fixedFiles > 0) {
    console.log('\nüéâ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: npm run build');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  } else {
    console.log('\n‚ÑπÔ∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  fixCriticalIssues().catch(console.error);
}

module.exports = { fixCriticalIssues };
