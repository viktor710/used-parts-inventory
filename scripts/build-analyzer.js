#!/usr/bin/env node

const { style } = require('./build-styles');

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏ Next.js
 * –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ —Å–±–æ—Ä–∫–∏ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ
 */

class BuildAnalyzer {
  constructor() {
    this.stats = {
      routes: [],
      totalSize: 0,
      staticPages: 0,
      dynamicPages: 0,
      buildTime: 0,
      errors: [],
      warnings: []
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ —Å–±–æ—Ä–∫–∏ Next.js
   */
  analyzeBuildOutput(output) {
    const lines = output.split('\n');
    
    for (const line of lines) {
      this.parseRouteLine(line);
      this.parseSizeLine(line);
      this.parseStaticPagesLine(line);
      this.parseBuildTimeLine(line);
      this.parseErrorLine(line);
      this.parseWarningLine(line);
    }
    
    return this.stats;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
   */
  parseRouteLine(line) {
    // Route (app)                             Size     First Load JS
    // ‚îå ‚óã /                                   8.88 kB         209 kB
    const routeMatch = line.match(/^[‚îú‚îî]\s+([‚óã∆í])\s+([^\s]+)\s+(\d+(?:\.\d+)?\s*kB)\s+(\d+(?:\.\d+)?\s*kB)/);
    
    if (routeMatch) {
      const [, type, path, size, firstLoad] = routeMatch;
      this.stats.routes.push({
        type: type === '‚óã' ? 'static' : 'dynamic',
        path,
        size,
        firstLoad
      });
      
      if (type === '‚óã') {
        this.stats.staticPages++;
      } else {
        this.stats.dynamicPages++;
      }
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
   */
  parseSizeLine(line) {
    // + First Load JS shared by all           196 kB
    const sizeMatch = line.match(/First Load JS shared by all\s+(\d+(?:\.\d+)?\s*kB)/);
    if (sizeMatch) {
      this.stats.totalSize = sizeMatch[1];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
   */
  parseStaticPagesLine(line) {
    // ‚úì Generating static pages (24/24)
    const staticMatch = line.match(/Generating static pages \((\d+)\/(\d+)\)/);
    if (staticMatch) {
      this.stats.staticPages = parseInt(staticMatch[1]);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —Å–±–æ—Ä–∫–∏
   */
  parseBuildTimeLine(line) {
    // ‚úì Compiled successfully in 2.3s
    const timeMatch = line.match(/Compiled successfully in ([\d.]+)s/);
    if (timeMatch) {
      this.stats.buildTime = parseFloat(timeMatch[1]);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
   */
  parseErrorLine(line) {
    if (line.includes('‚ùå') || line.includes('Error') || line.includes('Failed')) {
      this.stats.errors.push(line.trim());
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
   */
  parseWarningLine(line) {
    if (line.includes('‚ö†Ô∏è') || line.includes('Warning')) {
      this.stats.warnings.push(line.trim());
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–±–æ—Ä–∫–∏
   */
  displayBuildStats() {
    console.log(style.divider());
    console.log(style.header('üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏'));
    console.log(style.divider());

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(style.section('–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:'));
    console.log(style.info(`–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${this.stats.routes.length}`));
    console.log(style.info(`–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: ${this.stats.staticPages}`));
    console.log(style.info(`–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: ${this.stats.dynamicPages}`));
    
    if (this.stats.totalSize) {
      console.log(style.size('–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä JS', this.stats.totalSize));
    }
    
    if (this.stats.buildTime) {
      console.log(style.time('–í—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏', this.stats.buildTime * 1000));
    }

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
    if (this.stats.routes.length > 0) {
      console.log(style.section('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤:'));
      
      this.stats.routes.forEach((route, index) => {
        const typeIcon = route.type === 'static' ? '‚óã' : '∆í';
        const typeText = route.type === 'static' ? '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π' : '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π';
        
        console.log(style.route(`${typeIcon} ${route.path}`));
        console.log(style.size('  –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã', route.size));
        console.log(style.size('  –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞', route.firstLoad));
        console.log(style.info(`  –¢–∏–ø: ${typeText}`));
        
        if (index < this.stats.routes.length - 1) {
          console.log(style.divider());
        }
      });
    }

    // –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (this.stats.errors.length > 0) {
      console.log(style.section('–û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏:'));
      this.stats.errors.forEach(error => {
        console.log(style.error(error));
      });
    }

    if (this.stats.warnings.length > 0) {
      console.log(style.section('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:'));
      this.stats.warnings.forEach(warning => {
        console.log(style.warning(warning));
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.displayRecommendations();
    
    console.log(style.divider());
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  displayRecommendations() {
    console.log(style.section('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:'));
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
    const largeRoutes = this.stats.routes.filter(r => {
      const size = parseFloat(r.firstLoad.replace(' kB', ''));
      return size > 200;
    });
    
    if (largeRoutes.length > 0) {
      console.log(style.warning('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –±–æ–ª—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º JS:'));
      largeRoutes.forEach(route => {
        console.log(style.warning(`  - ${route.path}: ${route.firstLoad}`));
      });
      console.log(style.info('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –∫–æ–¥-—Å–ø–ª–∏—Ç—Ç–∏–Ω–≥, –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'));
    }

    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    if (this.stats.staticPages > 20) {
      console.log(style.info('–ú–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü - –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è SEO!'));
    }

    // –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    if (this.stats.dynamicPages > 10) {
      console.log(style.info('–ú–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ ISR –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'));
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(style.info('–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'));
    console.log(style.info('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Next.js Image –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'));
    console.log(style.info('  - –í–∫–ª—é—á–∏—Ç–µ —Å–∂–∞—Ç–∏–µ Gzip/Brotli –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'));
    console.log(style.info('  - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ Core Web Vitals'));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = { BuildAnalyzer };

// –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const analyzer = new BuildAnalyzer();
  
  // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ —Å–±–æ—Ä–∫–∏ –∏–∑ stdin –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  let buildOutput = '';
  
  if (process.argv.length > 2) {
    // –ß–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    const fs = require('fs');
    const filePath = process.argv[2];
    try {
      buildOutput = fs.readFileSync(filePath, 'utf8');
    } catch (error) {
      console.error(style.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${filePath}`));
      process.exit(1);
    }
  } else {
    // –ß–∏—Ç–∞–µ–º –∏–∑ stdin
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', (chunk) => {
      buildOutput += chunk;
    });
    
    process.stdin.on('end', () => {
      const stats = analyzer.analyzeBuildOutput(buildOutput);
      analyzer.displayBuildStats();
    });
    
    return;
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const stats = analyzer.analyzeBuildOutput(buildOutput);
  analyzer.displayBuildStats();
}
