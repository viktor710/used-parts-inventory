#!/usr/bin/env node

const { execSync } = require('child_process');
const { style } = require('./build-styles');
const { BuildAnalyzer } = require('./build-analyzer');

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ Next.js —Å –µ–¥–∏–Ω—ã–º —Å—Ç–∏–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π next build –¥–ª—è –ª—É—á—à–µ–≥–æ UX
 */

async function customBuild() {
  const startTime = Date.now();
  const analyzer = new BuildAnalyzer();
  
  try {
    console.log(style.header('üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞'));
    console.log(style.divider());
    
    // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log(style.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...'));
    try {
      execSync('npm list --depth=0', { stdio: 'pipe' });
      console.log(style.success('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã'));
    } catch (error) {
      console.log(style.warning('–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...'));
    }
    
    // –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client
    console.log(style.generate('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client...'));
    execSync('npx prisma generate', { stdio: 'inherit' });
    console.log(style.success('Prisma Client —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'));
    
    // –≠—Ç–∞–ø 3: –°–±–æ—Ä–∫–∞ Next.js
    console.log(style.build('–°–±–æ—Ä–∫–∞ Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...'));
    const buildOutput = execSync('next build', { 
      stdio: 'pipe',
      encoding: 'utf8'
    }).toString();
    
    // –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const buildTime = Date.now() - startTime;
    console.log(style.divider());
    console.log(style.done(`–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`));
    console.log(style.time('–û–±—â–µ–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏', buildTime));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∫–∏
    const stats = analyzer.analyzeBuildOutput(buildOutput);
    analyzer.displayBuildStats();
    
    console.log(style.divider());
    console.log(style.success('üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!'));
    
  } catch (error) {
    const buildTime = Date.now() - startTime;
    console.log(style.divider());
    console.error(style.error(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: ${error.message}`));
    console.log(style.time('–í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏', buildTime));
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
    if (error.stdout) {
      console.log(style.section('–ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å–±–æ—Ä–∫–∏:'));
      const stats = analyzer.analyzeBuildOutput(error.stdout);
      analyzer.displayBuildStats();
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  customBuild();
}

module.exports = { customBuild };
