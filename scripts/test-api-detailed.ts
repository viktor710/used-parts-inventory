import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testAPIDetailed() {
  console.log('üß™ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:')
    
    const carsCount = await prisma.car.count()
    const partsCount = await prisma.part.count()
    
    console.log(`üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ë–î: ${carsCount}`)
    console.log(`üîß –ó–∞–ø—á–∞—Å—Ç–∏ –≤ –ë–î: ${partsCount}`)
    
    if (carsCount > 0) {
      const cars = await prisma.car.findMany({ take: 2 })
      console.log('üöó –ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –ë–î:')
      cars.forEach(car => {
        console.log(`  - ${car.brand} ${car.model} (${car.year})`)
      })
    }
    
    if (partsCount > 0) {
      const parts = await prisma.part.findMany({ take: 2 })
      console.log('üîß –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—á–∞—Å—Ç–µ–π –∏–∑ –ë–î:')
      parts.forEach(part => {
        console.log(`  - ${part.zapchastName} (${part.status})`)
      })
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API:')
    
    const baseUrl = 'http://localhost:3000'
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    console.log('\nüöó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:')
    try {
      const carsResponse = await fetch(`${baseUrl}/api/cars`)
      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', carsResponse.status)
      console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(carsResponse.headers.entries()))
      
      const carsData = await carsResponse.json()
      console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(carsData, null, 2))
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error)
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–ø—á–∞—Å—Ç–µ–π
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—á–∞—Å—Ç–µ–π:')
    try {
      const partsResponse = await fetch(`${baseUrl}/api/parts`)
      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', partsResponse.status)
      console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(partsResponse.headers.entries()))
      
      const partsData = await partsResponse.json()
      console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(partsData, null, 2))
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –∑–∞–ø—á–∞—Å—Ç–µ–π:', error)
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testAPIDetailed()
