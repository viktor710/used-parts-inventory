import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—á–∞—Å—Ç–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—á–∞—Å—Ç–µ–π
 */
const testImages = {
  engine: [
    'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1562141964-3d5d5b5b5b5b?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800&h=600&fit=crop'
  ],
  transmission: [
    'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1562141964-3d5d5b5b5b5b?w=800&h=600&fit=crop'
  ],
  brakes: [
    'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1562141964-3d5d5b5b5b5b?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1581094794329-c8112a89af12?w=800&h=600&fit=crop'
  ],
  suspension: [
    'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1562141964-3d5d5b5b5b5b?w=800&h=600&fit=crop'
  ],
  electrical: [
    'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1562141964-3d5d5b5b5b5b?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800&h=600&fit=crop'
  ]
};

async function addTestImages() {
  try {
    console.log('üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –∑–∞–ø—á–∞—Å—Ç—è–º...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—á–∞—Å—Ç–∏
    const parts = await prisma.part.findMany();
    
    if (parts.length === 0) {
      console.log('‚ùå –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–ø—á–∞—Å—Ç–∏.');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∫–∞–∂–¥–æ–π –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const part of parts) {
      const categoryImages = testImages[part.category as keyof typeof testImages] || testImages.engine;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (1-4)
      const imageCount = Math.floor(Math.random() * categoryImages.length) + 1;
      const selectedImages = categoryImages.slice(0, imageCount);

      await prisma.part.update({
        where: { id: part.id },
        data: { images: selectedImages }
      });

      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${selectedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –∑–∞–ø—á–∞—Å—Ç–∏: ${part.zapchastName}`);
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const updatedParts = await prisma.part.findMany();
    const partsWithImages = updatedParts.filter(part => part.images.length > 0);
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø—á–∞—Å—Ç–µ–π: ${updatedParts.length}`);
    console.log(`   - –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${partsWithImages.length}`);
    console.log(`   - –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${updatedParts.length - partsWithImages.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addTestImages();
