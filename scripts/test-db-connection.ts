#!/usr/bin/env ts-node

import { PrismaClient } from '@prisma/client';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('DATABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', !!process.env['DATABASE_URL']);
console.log('DIRECT_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', !!process.env['DIRECT_URL']);

if (process.env['DATABASE_URL']) {
  console.log('DATABASE_URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', process.env['DATABASE_URL'].substring(0, 30) + '...');
}

if (process.env['DIRECT_URL']) {
  console.log('DIRECT_URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', process.env['DIRECT_URL'].substring(0, 30) + '...');
}

// –°–æ–∑–¥–∞–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
const prisma = new PrismaClient({
  log: ['query', 'error', 'warn'],
  datasources: {
    db: {
      url: process.env['DATABASE_URL'] || '',
    },
  },
});

async function testConnection() {
  try {
    console.log('\nüîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...');
    
    // –ü–æ–¥—Å—á–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    const carCount = await prisma.car.count();
    console.log('üöó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', carCount);
    
    // –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π
    const partCount = await prisma.part.count();
    console.log('üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π:', partCount);
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    const supplierCount = await prisma.supplier.count();
    console.log('üè¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', supplierCount);
    
    // –ü–æ–¥—Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    const customerCount = await prisma.customer.count();
    console.log('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:', customerCount);
    
    // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–¥–∞–∂
    const saleCount = await prisma.sale.count();
    console.log('üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:', saleCount);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    if (error instanceof Error) {
      console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    } else {
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ—à–∏–±–∫–∏
    if (error && typeof error === 'object' && 'code' in error) {
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', (error as any).code);
    }
    
    if (error && typeof error === 'object' && 'meta' in error) {
      console.error('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', (error as any).meta);
    }
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env.local');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏ —Ñ–∞–π—Ä–≤–æ–ª–∞');
    console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ IP –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ Supabase');
    
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await prisma.$disconnect();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testConnection()
  .then(() => {
    console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
