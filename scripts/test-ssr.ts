import 'dotenv/config';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testSSR() {
  console.log('üîß [TEST] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π
    const cars = await prisma.car.findMany({
      select: { id: true, brand: true, model: true }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è SSR: ${cars.length}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    for (const car of cars.slice(0, 3)) { // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.brand} ${car.model} (ID: ${car.id})`);
      
      const fullCar = await prisma.car.findUnique({
        where: { id: car.id },
        include: { parts: true }
      });
      
      if (fullCar) {
        console.log(`‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω: ${fullCar.brand} ${fullCar.model}`);
        console.log(`   VIN: ${fullCar.vin}`);
        console.log(`   –ì–æ–¥: ${fullCar.year}`);
        console.log(`   –ó–∞–ø—á–∞—Å—Ç–µ–π: ${fullCar.parts.length}`);
        console.log(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${fullCar.images?.length || 0}`);
      } else {
        console.log(`‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SSR:', error);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîß [TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSR –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

testSSR();
