const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const dataDir = path.join(process.cwd(), 'data');
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ data');
}

// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(dataDir, 'inventory.db');
const db = new sqlite3.Database(dbPath);

console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
function runQuery(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function(err) {
      if (err) {
        reject(err);
      } else {
        resolve(this);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function getQuery(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => {
      if (err) {
        reject(err);
      } else {
        resolve(row);
      }
    });
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await runQuery(`
      CREATE TABLE IF NOT EXISTS parts (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        category TEXT NOT NULL CHECK (category IN ('engine', 'transmission', 'suspension', 'brakes', 'electrical', 'body', 'interior', 'exterior', 'other')),
        brand TEXT NOT NULL,
        model TEXT NOT NULL,
        year INTEGER NOT NULL,
        condition TEXT NOT NULL CHECK (condition IN ('excellent', 'good', 'fair', 'poor', 'broken')),
        status TEXT NOT NULL CHECK (status IN ('available', 'reserved', 'sold', 'scrapped')),
        price REAL NOT NULL,
        description TEXT,
        location TEXT NOT NULL,
        supplier TEXT NOT NULL,
        purchase_date TEXT NOT NULL,
        purchase_price REAL NOT NULL,
        images TEXT,
        notes TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    `);

    await runQuery(`
      CREATE TABLE IF NOT EXISTS suppliers (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        contact TEXT,
        phone TEXT,
        email TEXT,
        address TEXT,
        notes TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    `);

    await runQuery(`
      CREATE TABLE IF NOT EXISTS customers (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        phone TEXT,
        email TEXT,
        address TEXT,
        notes TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    `);

    await runQuery(`
      CREATE TABLE IF NOT EXISTS sales (
        id TEXT PRIMARY KEY,
        part_id TEXT NOT NULL,
        customer_id TEXT NOT NULL,
        price REAL NOT NULL,
        sale_date TEXT NOT NULL,
        notes TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL,
        FOREIGN KEY (part_id) REFERENCES parts (id),
        FOREIGN KEY (customer_id) REFERENCES customers (id)
      )
    `);

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await runQuery('CREATE INDEX IF NOT EXISTS idx_parts_category ON parts (category)');
    await runQuery('CREATE INDEX IF NOT EXISTS idx_parts_status ON parts (status)');
    await runQuery('CREATE INDEX IF NOT EXISTS idx_parts_brand ON parts (brand)');
    await runQuery('CREATE INDEX IF NOT EXISTS idx_parts_model ON parts (model)');
    await runQuery('CREATE INDEX IF NOT EXISTS idx_parts_price ON parts (price)');
    await runQuery('CREATE INDEX IF NOT EXISTS idx_parts_location ON parts (location)');
    await runQuery('CREATE INDEX IF NOT EXISTS idx_sales_part_id ON sales (part_id)');
    await runQuery('CREATE INDEX IF NOT EXISTS idx_sales_customer_id ON sales (customer_id)');

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testParts = [
      {
        id: '1',
        name: '–î–≤–∏–≥–∞—Ç–µ–ª—å BMW M54 2.5L',
        category: 'engine',
        brand: 'BMW',
        model: 'E46',
        year: 2003,
        condition: 'good',
        status: 'available',
        price: 85000,
        description: '–î–≤–∏–≥–∞—Ç–µ–ª—å BMW M54 2.5L –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ–±–µ–≥ 150,000 –∫–º',
        location: '–°–∫–ª–∞–¥ –ê, –ø–æ–ª–∫–∞ 1',
        supplier: '–ê–≤—Ç–æ—Ä–∞–∑–±–æ—Ä–∫–∞ BMW',
        purchase_date: '2024-01-15T00:00:00.000Z',
        purchase_price: 65000,
        images: '[]',
        notes: '–ü—Ä–æ–≤–µ—Ä–µ–Ω, –≥–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –ö–æ–º–ø–ª–µ–∫—Ç –ø–æ–ª–Ω—ã–π.',
        created_at: '2024-01-15T00:00:00.000Z',
        updated_at: '2024-01-15T00:00:00.000Z',
      },
      {
        id: '2',
        name: '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á 5MT Toyota',
        category: 'transmission',
        brand: 'Toyota',
        model: 'Camry',
        year: 2010,
        condition: 'excellent',
        status: 'available',
        price: 45000,
        description: '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
        location: '–°–∫–ª–∞–¥ –ë, –ø–æ–ª–∫–∞ 3',
        supplier: 'Toyota Parts',
        purchase_date: '2024-01-10T00:00:00.000Z',
        purchase_price: 35000,
        images: '[]',
        notes: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–∞ —Å—Ç–µ–Ω–¥–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ.',
        created_at: '2024-01-10T00:00:00.000Z',
        updated_at: '2024-01-10T00:00:00.000Z',
      },
      {
        id: '3',
        name: '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ Brembo',
        category: 'brakes',
        brand: 'Brembo',
        model: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ',
        year: 2020,
        condition: 'excellent',
        status: 'available',
        price: 8000,
        description: '–ü–µ—Ä–µ–¥–Ω–∏–µ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ Brembo, –Ω–æ–≤—ã–µ',
        location: '–°–∫–ª–∞–¥ –ê, –ø–æ–ª–∫–∞ 5',
        supplier: 'Brembo Official',
        purchase_date: '2024-01-05T00:00:00.000Z',
        purchase_price: 6000,
        images: '[]',
        notes: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏, –≤ —É–ø–∞–∫–æ–≤–∫–µ.',
        created_at: '2024-01-05T00:00:00.000Z',
        updated_at: '2024-01-05T00:00:00.000Z',
      },
    ];

    for (let i = 0; i < testParts.length; i++) {
      const part = testParts[i];
      try {
        await runQuery(`
          INSERT INTO parts (
            id, name, category, brand, model, year, condition, status, price,
            description, location, supplier, purchase_date, purchase_price,
            images, notes, created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `, [
          part.id,
          part.name,
          part.category,
          part.brand,
          part.model,
          part.year,
          part.condition,
          part.status,
          part.price,
          part.description,
          part.location,
          part.supplier,
          part.purchase_date,
          part.purchase_price,
          part.images,
          part.notes,
          part.created_at,
          part.updated_at
        ]);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—á–∞—Å—Ç—å ${i + 1}: ${part.name}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏ ${i + 1}:`, error.message);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const count = await getQuery('SELECT COUNT(*) as count FROM parts');
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ –±–∞–∑–µ: ${count.count}`);

    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: data/inventory.db');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    db.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initDatabase();
