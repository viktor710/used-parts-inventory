async function checkWebsite() {
  console.log('üåê –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞...');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints:');
    
    const apiTests = [
      { name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', url: '/api/stats' },
      { name: '–ó–∞–ø—á–∞—Å—Ç–∏', url: '/api/parts' },
      { name: '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', url: '/api/cars' }
    ];
    
    for (const test of apiTests) {
      try {
        const response = await fetch(`http://localhost:3000${test.url}`);
        const data = await response.json();
        
        if (data.success) {
          const count = test.name === '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' 
            ? `${data.data.totalParts} –∑–∞–ø—á–∞—Å—Ç–µ–π, ${data.data.totalCars} –∞–≤—Ç–æ`
            : test.name === '–ó–∞–ø—á–∞—Å—Ç–∏'
            ? `${data.data.data.length} –∑–∞–ø—á–∞—Å—Ç–µ–π`
            : `${data.data.cars.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`;
          
          console.log(`  ‚úÖ ${test.name}: ${count}`);
        } else {
          console.log(`  ‚ùå ${test.name}: ${data.error}`);
        }
      } catch (error) {
        console.log(`  ‚ùå ${test.name}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏`);
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:');
    
    const pageTests = [
      { name: '–ì–ª–∞–≤–Ω–∞—è', url: '/' },
      { name: '–ó–∞–ø—á–∞—Å—Ç–∏', url: '/parts' },
      { name: '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', url: '/cars' }
    ];
    
    for (const test of pageTests) {
      try {
        const response = await fetch(`http://localhost:3000${test.url}`);
        
        if (response.status === 200) {
          const html = await response.text();
          const hasJavaScript = html.includes('<script');
          const hasReact = html.includes('React') || html.includes('__NEXT');
          const size = Math.round(html.length / 1024);
          
          console.log(`  ‚úÖ ${test.name}: ${size}KB, JS: ${hasJavaScript ? '–¥–∞' : '–Ω–µ—Ç'}, React: ${hasReact ? '–¥–∞' : '–Ω–µ—Ç'}`);
        } else {
          console.log(`  ‚ùå ${test.name}: HTTP ${response.status}`);
        }
      } catch (error) {
        console.log(`  ‚ùå ${test.name}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏`);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      const [partsResponse, carsResponse] = await Promise.all([
        fetch('http://localhost:3000/api/parts'),
        fetch('http://localhost:3000/api/cars')
      ]);
      
      const [partsResult, carsResult] = await Promise.all([
        partsResponse.json(),
        carsResponse.json()
      ]);
      
      if (partsResult.success && carsResult.success) {
        const parts = partsResult.data.data;
        const cars = carsResult.data.cars;
        
        console.log(`  ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${parts.length} –∑–∞–ø—á–∞—Å—Ç–µ–π, ${cars.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        let linkedCount = 0;
        parts.forEach((part: any) => {
          const car = cars.find((c: any) => c.id === part.carId);
          if (car) linkedCount++;
        });
        
        console.log(`  ‚úÖ –°–≤—è–∑–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: ${linkedCount}/${parts.length} –∑–∞–ø—á–∞—Å—Ç–µ–π —Å–≤—è–∑–∞–Ω—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø—á–∞—Å—Ç—å
        if (parts.length > 0) {
          const firstPart = parts[0];
          console.log(`  üìã –ü–µ—Ä–≤–∞—è –∑–∞–ø—á–∞—Å—Ç—å: ${firstPart.zapchastName} (${firstPart.status})`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        if (cars.length > 0) {
          const firstCar = cars[0];
          console.log(`  üöó –ü–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${firstCar.brand} ${firstCar.model} (${firstCar.year})`);
        }
        
      } else {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö`);
      }
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: ${error}`);
    }
    
    // 4. –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('\nüîç –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
    console.log('  API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('  –°—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è');
    console.log('  –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API');
    console.log('');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã":');
    console.log('  1. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (Ctrl+F5)');
    console.log('  2. JavaScript –æ—Ç–∫–ª—é—á–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('  3. –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å DevTools');
    console.log('  4. –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –¥–∞–Ω–Ω—ã–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è');
    console.log('');
    console.log('üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('  1. –û—Ç–∫—Ä–æ–π—Ç–µ DevTools (F12) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏');
    console.log('  2. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+Shift+Delete)');
    console.log('  3. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∂–∞—Ç—ã–º Ctrl (Ctrl+F5)');
    console.log('  4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–π—Ç–∞:', error);
  }
}

checkWebsite();
