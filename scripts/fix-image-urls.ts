import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –†–∞–±–æ—á–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const workingImageUrls = [
  'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
  'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800&h=600&fit=crop',
  'https://images.unsplash.com/photo-1581094794329-c8112a89af12?w=800&h=600&fit=crop',
  'https://images.unsplash.com/photo-1581094794329-c8112a89af12?w=800&h=600&fit=crop&auto=format',
  'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop&auto=format'
];

async function fixImageUrls() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    const parts = await prisma.part.findMany();
    
    for (const part of parts) {
      console.log(`\nüì¶ –ó–∞–ø—á–∞—Å—Ç—å: ${part.zapchastName}`);
      console.log(`   –ë—ã–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${part.images.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π URL
      const fixedImages = [];
      for (let i = 0; i < part.images.length; i++) {
        const imageUrl = part.images[i];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ undefined
        if (!imageUrl) {
          console.log(`   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –∏–º–µ–µ—Ç –ø—É—Å—Ç–æ–π URL, –∑–∞–º–µ–Ω—è–µ–º...`);
          const replacementUrl = workingImageUrls[i % workingImageUrls.length];
          fixedImages.push(replacementUrl);
          console.log(`   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞: ${replacementUrl}`);
          continue;
        }
        
        try {
          const response = await fetch(imageUrl, { method: 'HEAD' });
          if (response.ok) {
            console.log(`   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} —Ä–∞–±–æ—Ç–∞–µ—Ç: ${imageUrl}`);
            fixedImages.push(imageUrl);
          } else {
            console.log(`   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${response.status}), –∑–∞–º–µ–Ω—è–µ–º...`);
            // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ä–∞–±–æ—á–∏–π URL
            const replacementUrl = workingImageUrls[i % workingImageUrls.length];
            fixedImages.push(replacementUrl);
            console.log(`   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞: ${replacementUrl}`);
          }
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}, –∑–∞–º–µ–Ω—è–µ–º...`);
          const replacementUrl = workingImageUrls[i % workingImageUrls.length];
          fixedImages.push(replacementUrl);
          console.log(`   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞: ${replacementUrl}`);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—á–∞—Å—Ç—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ URL
      if (JSON.stringify(part.images) !== JSON.stringify(fixedImages)) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
        const validImages = fixedImages.filter((url): url is string => url !== undefined);
        
        await prisma.part.update({
          where: { id: part.id },
          data: { images: validImages }
        });
        console.log(`   ‚úÖ –ó–∞–ø—á–∞—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å ${validImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
      } else {
        console.log(`   ‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      }
    }
    
    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixImageUrls();
