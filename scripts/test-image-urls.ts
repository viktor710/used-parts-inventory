import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testImageUrls() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    const parts = await prisma.part.findMany();
    
    for (const part of parts) {
      console.log(`\nüì¶ –ó–∞–ø—á–∞—Å—Ç—å: ${part.zapchastName}`);
      console.log(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${part.images.length}`);
      
      for (let i = 0; i < part.images.length; i++) {
        const imageUrl = part.images[i];
        console.log(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}: ${imageUrl}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ undefined
        if (!imageUrl) {
          console.log(`   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –∏–º–µ–µ—Ç –ø—É—Å—Ç–æ–π URL`);
          continue;
        }
        
        try {
          const response = await fetch(imageUrl, { method: 'HEAD' });
          if (response.ok) {
            console.log(`   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –¥–æ—Å—Ç—É–ø–Ω–æ (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
          } else {
            console.log(`   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
          }
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, (error as Error).message);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
testImageUrls();
