/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Winston —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤
 */

import { Logger } from '../lib/logger';

async function testLogger() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Winston —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤...\n');

  // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  Logger.info('–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', { test: true, timestamp: new Date().toISOString() });
  Logger.warn('–¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', { warning: 'test warning' });
  Logger.error('–¢–µ—Å—Ç –æ—à–∏–±–∫–∏', { error: 'test error', stack: new Error().stack });
  Logger.debug('–¢–µ—Å—Ç –æ—Ç–ª–∞–¥–∫–∏', { debug: 'test debug info' });

  // –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  Logger.api('GET', '/api/test', 200, 150, { userAgent: 'test-agent' });
  Logger.database('SELECT', 'parts', 45, { query: 'SELECT * FROM parts' });
  Logger.validation('TestSchema', ['Field is required'], { field: 'name' });
  Logger.fileUpload('test-image.jpg', 1024 * 1024, 'success', { userId: '123' });
  Logger.auth('login', 'user123', { ip: '127.0.0.1' });
  Logger.performance('database_query', 250, { table: 'parts' });
  Logger.fix('TestComponent', 'Missing prop', 'Added default value', { component: 'TestComponent' });

  // –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏
  console.log('\nüìù –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–∏...');
  
  for (let i = 1; i <= 10; i++) {
    Logger.info(`–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å #${i}`, { 
      iteration: i, 
      timestamp: new Date().toISOString(),
      data: `–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ ${i}`
    });
    
    if (i % 3 === 0) {
      Logger.error(`–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ #${i}`, { 
        errorCode: `ERR_${i}`, 
        details: `–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ ${i}` 
      });
    }
    
    if (i % 2 === 0) {
      Logger.api('POST', `/api/test/${i}`, 201, 100 + i * 10, { 
        requestId: `req_${i}`,
        payload: { test: i }
      });
    }
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É logs/ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤');
  console.log('üîÑ –§–∞–π–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –¥–Ω—è–º');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testLogger().catch(console.error);
