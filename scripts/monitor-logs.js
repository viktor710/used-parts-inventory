/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ó–∞–ø—É—Å–∫: node scripts/monitor-logs.js
 */

const fs = require('fs');
const path = require('path');

const logDir = path.join(__dirname, '..', 'logs');
const errorLogPath = path.join(logDir, 'error.log');
const combinedLogPath = path.join(logDir, 'combined.log');

/**
 * –ß–∏—Ç–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –ª–æ–≥–∏
 */
function readLogs(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      return [];
    }
    
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.trim().split('\n').filter(line => line.length > 0);
    
    return lines.map(line => {
      try {
        return JSON.parse(line);
      } catch {
        return { message: line, timestamp: new Date().toISOString() };
      }
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏–∑ ${filePath}:`, error.message);
    return [];
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤
 */
function showLogStats() {
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:');
  console.log('='.repeat(50));
  
  const errorLogs = readLogs(errorLogPath);
  const combinedLogs = readLogs(combinedLogPath);
  
  console.log(`üî¥ –û—à–∏–±–∫–∏: ${errorLogs.length}`);
  console.log(`üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${combinedLogs.length}`);
  
  if (errorLogs.length > 0) {
    const recentErrors = errorLogs.slice(-5);
    console.log('\nüö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫:');
    recentErrors.forEach((log, index) => {
      console.log(`${index + 1}. ${log.timestamp} - ${log.message}`);
      if (log.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${log.error.message}`);
      }
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
  const errorTypes = {};
  errorLogs.forEach(log => {
    const type = log.error?.name || 'Unknown';
    errorTypes[type] = (errorTypes[type] || 0) + 1;
  });
  
  if (Object.keys(errorTypes).length > 0) {
    console.log('\nüìà –¢–∏–ø—ã –æ—à–∏–±–æ–∫:');
    Object.entries(errorTypes).forEach(([type, count]) => {
      console.log(`   ${type}: ${count}`);
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑ API –∑–∞–ø—Ä–æ—Å–æ–≤
  const apiLogs = combinedLogs.filter(log => log.message && log.message.includes('API'));
  if (apiLogs.length > 0) {
    console.log(`\nüåê API –∑–∞–ø—Ä–æ—Å—ã: ${apiLogs.length}`);
    
    const apiStats = {};
    apiLogs.forEach(log => {
      const match = log.message.match(/API (\w+) (\/api\/[^\s]+)/);
      if (match) {
        const method = match[1];
        const path = match[2];
        const key = `${method} ${path}`;
        apiStats[key] = (apiStats[key] || 0) + 1;
      }
    });
    
    console.log('üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ API endpoints:');
    Object.entries(apiStats)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .forEach(([endpoint, count]) => {
        console.log(`   ${endpoint}: ${count} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      });
  }
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
function monitorLogs() {
  console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...');
  console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
  
  let lastErrorSize = 0;
  let lastCombinedSize = 0;
  
  const checkForNewLogs = () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
      const errorSize = fs.existsSync(errorLogPath) ? fs.statSync(errorLogPath).size : 0;
      const combinedSize = fs.existsSync(combinedLogPath) ? fs.statSync(combinedLogPath).size : 0;
      
      // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è, —á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
      if (errorSize > lastErrorSize) {
        const newErrorLogs = readLogs(errorLogPath).slice(-1);
        newErrorLogs.forEach(log => {
          console.log(`üö® ${log.timestamp} - ${log.message}`);
          if (log.error) {
            console.log(`   –û—à–∏–±–∫–∞: ${log.error.message}`);
          }
        });
        lastErrorSize = errorSize;
      }
      
      if (combinedSize > lastCombinedSize) {
        const newCombinedLogs = readLogs(combinedLogPath).slice(-1);
        newCombinedLogs.forEach(log => {
          if (log.level === 'warn') {
            console.log(`‚ö†Ô∏è  ${log.timestamp} - ${log.message}`);
          } else if (log.level === 'info' && log.message.includes('API')) {
            console.log(`üåê ${log.timestamp} - ${log.message}`);
          }
        });
        lastCombinedSize = combinedSize;
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
    }
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  const interval = setInterval(checkForNewLogs, 1000);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  process.on('SIGINT', () => {
    clearInterval(interval);
    console.log('\n\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    showLogStats();
    process.exit(0);
  });
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
 */
function cleanupLogs() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤...');
  
  try {
    if (fs.existsSync(errorLogPath)) {
      const stats = fs.statSync(errorLogPath);
      const fileSizeInMB = stats.size / (1024 * 1024);
      
      if (fileSizeInMB > 10) { // –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 10MB
        console.log(`–§–∞–π–ª error.log —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${fileSizeInMB.toFixed(2)}MB), –æ—á–∏—â–∞–µ–º...`);
        fs.writeFileSync(errorLogPath, '');
      }
    }
    
    if (fs.existsSync(combinedLogPath)) {
      const stats = fs.statSync(combinedLogPath);
      const fileSizeInMB = stats.size / (1024 * 1024);
      
      if (fileSizeInMB > 20) { // –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 20MB
        console.log(`–§–∞–π–ª combined.log —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${fileSizeInMB.toFixed(2)}MB), –æ—á–∏—â–∞–µ–º...`);
        fs.writeFileSync(combinedLogPath, '');
      }
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤:', error.message);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'stats':
      showLogStats();
      break;
    case 'monitor':
      monitorLogs();
      break;
    case 'cleanup':
      cleanupLogs();
      break;
    default:
      console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤');
      console.log('='.repeat(30));
      console.log('–ö–æ–º–∞–Ω–¥—ã:');
      console.log('  node scripts/monitor-logs.js stats    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      console.log('  node scripts/monitor-logs.js monitor  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
      console.log('  node scripts/monitor-logs.js cleanup  - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏');
      break;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { showLogStats, monitorLogs, cleanupLogs };
