const fs = require('fs');
const path = require('path');

function convertJsonToTypeScript() {
  try {
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
    const jsonPath = path.join(__dirname, '../data/zapchasti.json');
    const jsonContent = fs.readFileSync(jsonPath, 'utf-8');
    const data = JSON.parse(jsonContent);

    // –°–æ–∑–¥–∞–µ–º TypeScript –∫–æ–¥
    const tsCode = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ zapchasti.json
// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toISOString()}

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export interface Zapchast {
  id: number;
  name: string;
}

export interface ZapchastiData {
  zapchasti: Zapchast[];
}

// –î–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–µ–π
export const zapchastiData: ZapchastiData = ${JSON.stringify(data, null, 2)};

// –ú–∞—Å—Å–∏–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const zapchasti: Zapchast[] = zapchastiData.zapchasti;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
export function findZapchastById(id: number): Zapchast | undefined {
  return zapchasti.find(item => item.id === id);
}

export function findZapchastByName(name: string): Zapchast | undefined {
  return zapchasti.find(item => 
    item.name.toLowerCase() === name.toLowerCase()
  );
}

export function searchZapchasti(query: string): Zapchast[] {
  const lowerQuery = query.toLowerCase();
  return zapchasti.filter(item => 
    item.name.toLowerCase().includes(lowerQuery)
  );
}

export function getAllZapchasti(): Zapchast[] {
  return [...zapchasti];
}

export function getZapchastiCount(): number {
  return zapchasti.length;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
export function getAutocompleteSuggestions(query: string, limit: number = 10): Zapchast[] {
  if (!query.trim()) return [];
  
  const lowerQuery = query.toLowerCase();
  const suggestions = zapchasti.filter(item => 
    item.name.toLowerCase().includes(lowerQuery)
  );
  
  return suggestions.slice(0, limit);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏
export function isZapchastExists(name: string): boolean {
  return findZapchastByName(name) !== undefined;
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default zapchastiData;
`;

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º TypeScript —Ñ–∞–π–ª
    const tsPath = path.join(__dirname, '../lib/zapchasti-data.ts');
    fs.writeFileSync(tsPath, tsCode, 'utf-8');

    console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!');
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${tsPath}`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π: ${data.zapchasti.length}`);
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
    console.log('- findZapchastById(id: number)');
    console.log('- findZapchastByName(name: string)');
    console.log('- searchZapchasti(query: string)');
    console.log('- getAllZapchasti()');
    console.log('- getZapchastiCount()');
    console.log('- getAutocompleteSuggestions(query: string)');
    console.log('- isZapchastExists(name: string)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
convertJsonToTypeScript();
