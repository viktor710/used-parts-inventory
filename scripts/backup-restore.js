const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç pg_dump –∏ psql –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
 */

class DatabaseBackup {
  constructor() {
    this.backupDir = path.join(__dirname, '../backups');
    this.ensureBackupDir();
  }

  /**
   * –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
   */
  ensureBackupDir() {
    if (!fs.existsSync(this.backupDir)) {
      fs.mkdirSync(this.backupDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: ${this.backupDir}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  getDatabaseConfig() {
    const databaseUrl = process.env.DATABASE_URL;
    if (!databaseUrl) {
      throw new Error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    // –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const url = new URL(databaseUrl);
    return {
      host: url.hostname,
      port: url.port || 5432,
      database: url.pathname.slice(1), // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à
      username: url.username,
      password: url.password
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async createBackup(backupName = null) {
    try {
      const config = this.getDatabaseConfig();
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fileName = backupName || `backup-${timestamp}.sql`;
      const filePath = path.join(this.backupDir, fileName);

      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

      const command = `pg_dump -h ${config.host} -p ${config.port} -U ${config.username} -d ${config.database} -f "${filePath}"`;

      await this.executeCommand(command, config.password);

      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${filePath}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const stats = fs.statSync(filePath);
      const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
      console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSizeInMB} MB`);

      return filePath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
   */
  async restoreBackup(backupPath) {
    try {
      const config = this.getDatabaseConfig();
      
      if (!fs.existsSync(backupPath)) {
        throw new Error(`–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupPath}`);
      }

      console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
      console.log(`üìÅ –§–∞–π–ª: ${backupPath}`);

      const command = `psql -h ${config.host} -p ${config.port} -U ${config.username} -d ${config.database} -f "${backupPath}"`;

      await this.executeCommand(command, config.password);

      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞—Ä–æ–ª—è
   */
  executeCommand(command, password) {
    return new Promise((resolve, reject) => {
      const env = { ...process.env, PGPASSWORD: password };
      
      const child = exec(command, { env }, (error, stdout, stderr) => {
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
          reject(error);
          return;
        }
        
        if (stderr) {
          console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);
        }
        
        if (stdout) {
          console.log('–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:', stdout);
        }
        
        resolve(stdout);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
      child.on('error', (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
        reject(error);
      });
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
   */
  listBackups() {
    try {
      const files = fs.readdirSync(this.backupDir);
      const backups = files
        .filter(file => file.endsWith('.sql'))
        .map(file => {
          const filePath = path.join(this.backupDir, file);
          const stats = fs.statSync(filePath);
          return {
            name: file,
            path: filePath,
            size: stats.size,
            sizeMB: (stats.size / (1024 * 1024)).toFixed(2),
            createdAt: stats.birthtime,
            modifiedAt: stats.mtime
          };
        })
        .sort((a, b) => b.modifiedAt - a.modifiedAt);

      return backups;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error);
      return [];
    }
  }

  /**
   * –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N)
   */
  cleanupOldBackups(keepCount = 10) {
    try {
      const backups = this.listBackups();
      
      if (backups.length <= keepCount) {
        console.log(`üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (${backups.length}/${keepCount})`);
        return;
      }

      const toDelete = backups.slice(keepCount);
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${toDelete.length} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...`);

      toDelete.forEach(backup => {
        try {
          fs.unlinkSync(backup.path);
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞: ${backup.name}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${backup.name}:`, error.message);
        }
      });

      console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–≤–ª–µ–Ω–æ ${keepCount} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
   */
  async validateBackup(backupPath) {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
      
      const content = fs.readFileSync(backupPath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
      const requiredTables = ['cars', 'parts', 'suppliers', 'customers', 'sales'];
      const missingTables = requiredTables.filter(table => !content.includes(`CREATE TABLE ${table}`));
      
      if (missingTables.length > 0) {
        console.warn(`‚ö†Ô∏è –í —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: ${missingTables.join(', ')}`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const stats = fs.statSync(backupPath);
      if (stats.size < 1024) { // –ú–µ–Ω—å—à–µ 1KB
        console.warn('‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞');
        return false;
      }

      console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error.message);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = DatabaseBackup;

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const backup = new DatabaseBackup();
  const command = process.argv[2];
  const arg = process.argv[3];

  switch (command) {
    case 'backup':
      backup.createBackup(arg)
        .then(() => {
          console.log('üéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          process.exit(0);
        })
        .catch((error) => {
          console.error('üí• –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
          process.exit(1);
        });
      break;

    case 'restore':
      if (!arg) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        process.exit(1);
      }
      backup.restoreBackup(arg)
        .then(() => {
          console.log('üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          process.exit(0);
        })
        .catch((error) => {
          console.error('üí• –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
          process.exit(1);
        });
      break;

    case 'list':
      const backups = backup.listBackups();
      console.log('üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:');
      backups.forEach((backup, index) => {
        console.log(`${index + 1}. ${backup.name} (${backup.sizeMB} MB) - ${backup.modifiedAt.toLocaleString()}`);
      });
      break;

    case 'cleanup':
      backup.cleanupOldBackups(parseInt(arg) || 10);
      break;

    case 'validate':
      if (!arg) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        process.exit(1);
      }
      backup.validateBackup(arg)
        .then((isValid) => {
          process.exit(isValid ? 0 : 1);
        });
      break;

    default:
      console.log(`
üîß –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node backup-restore.js <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç]

–ö–æ–º–∞–Ω–¥—ã:
  backup [–∏–º—è_—Ñ–∞–π–ª–∞]     - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  restore <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  list                   - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
  cleanup [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]   - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
  validate <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏

–ü—Ä–∏–º–µ—Ä—ã:
  node backup-restore.js backup
  node backup-restore.js backup my-backup.sql
  node backup-restore.js restore ./backups/backup-2024-01-15.sql
  node backup-restore.js list
  node backup-restore.js cleanup 5
      `);
      break;
  }
}
