#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Prisma –¥–ª—è Vercel...');

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏
  if (process.env.NODE_ENV === 'production') {
    console.log('üì¶ Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client
    console.log('üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client...');
    execSync('npx prisma generate', { stdio: 'inherit' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
    const prismaClientPath = path.join(process.cwd(), 'node_modules', '@prisma', 'client');
    if (fs.existsSync(prismaClientPath)) {
      console.log('‚úÖ Prisma Client —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.error('‚ùå Prisma Client –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    try {
      execSync('npx prisma db pull', { stdio: 'inherit' });
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–±–æ—Ä–∫–∏');
    }
  } else {
    console.log('üõ†Ô∏è Development –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Prisma');
  }
  
  console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Prisma –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Prisma:', error);
  process.exit(1);
}
