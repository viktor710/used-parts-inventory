import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkImages() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const parts = await prisma.part.findMany();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π: ${parts.length}`);
    
    parts.forEach((part, index) => {
      console.log(`${index + 1}. ${part.zapchastName}`);
      console.log(`   - ID: ${part.id}`);
      console.log(`   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${part.images.length}`);
      console.log(`   - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`, part.images);
      console.log('');
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const partsWithOneImage = parts.filter(part => part.images.length === 1);
    const partsWithTwoImages = parts.filter(part => part.images.length === 2);
    const partsWithThreeImages = parts.filter(part => part.images.length === 3);
    const partsWithMoreImages = parts.filter(part => part.images.length > 3);
    
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
    console.log(`   - 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${partsWithOneImage.length} –∑–∞–ø—á–∞—Å—Ç–µ–π`);
    console.log(`   - 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${partsWithTwoImages.length} –∑–∞–ø—á–∞—Å—Ç–µ–π`);
    console.log(`   - 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${partsWithThreeImages.length} –∑–∞–ø—á–∞—Å—Ç–µ–π`);
    console.log(`   - 4+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${partsWithMoreImages.length} –∑–∞–ø—á–∞—Å—Ç–µ–π`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
checkImages();
