import { prisma } from '../lib/prisma';

async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π
    const partsCount = await prisma.part.count();
    console.log(`üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ –±–∞–∑–µ: ${partsCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    const carsCount = await prisma.car.count();
    console.log(`üöó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –±–∞–∑–µ: ${carsCount}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const parts = await prisma.part.findMany({
      take: 5,
      include: {
        car: true
      }
    });
    
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—á–∞—Å—Ç–µ–π:');
    parts.forEach((part, index) => {
      console.log(`${index + 1}. ${part.zapchastName} (ID: ${part.id})`);
      console.log(`   –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${part.car?.brand} ${part.car?.model}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${part.status}`);
      console.log(`   –¶–µ–Ω–∞: ${part.price} ‚ÇΩ`);
      console.log('');
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const cars = await prisma.car.findMany({
      take: 3
    });
    
    console.log('üöó –ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:');
    cars.forEach((car, index) => {
      console.log(`${index + 1}. ${car.brand} ${car.model} (${car.year})`);
      console.log(`   ID: ${car.id}`);
      console.log(`   VIN: ${car.vin}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();
