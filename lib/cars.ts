import { prisma } from '@/lib/prisma';
import { Car } from '@/types';

/**
 * –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
 */
export async function getAllCars(): Promise<Car[]> {
  try {
    console.log('üîß [DEBUG] getAllCars: –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞');

    const cars = await prisma.car.findMany({
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log('üîß [DEBUG] getAllCars: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', cars.length);
    return cars;

  } catch (error) {
    console.error('üîß [DEBUG] getAllCars: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
    return [];
  }
}

/**
 * –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID
 */
export async function getCarById(id: string): Promise<Car | null> {
  try {
    console.log('üîß [DEBUG] getCarById: –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID:', id);

    const car = await prisma.car.findUnique({
      where: { id }
    });

    if (!car) {
      console.log('üîß [DEBUG] getCarById: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }

    console.log('üîß [DEBUG] getCarById: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω:', car.brand, car.model);
    return car;

  } catch (error) {
    console.error('üîß [DEBUG] getCarById: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
    return null;
  }
}
