import { prisma } from '@/lib/prisma';
import { Part, Car } from '@/types';

/**
 * –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
 */
export async function getAllParts(): Promise<(Part & { car: Car | null })[]> {
  try {
    console.log('üîß [DEBUG] getAllParts: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞');

    const parts = await prisma.part.findMany({
      include: {
        car: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log('üîß [DEBUG] getAllParts: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π:', parts.length);
    return parts;

  } catch (error) {
    console.error('üîß [DEBUG] getAllParts: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π:', error);
    return [];
  }
}

/**
 * –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ ID
 */
export async function getPartById(id: string): Promise<(Part & { car: Car | null }) | null> {
  try {
    console.log('üîß [DEBUG] getPartById: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—á–∞—Å—Ç–∏ —Å ID:', id);

    const part = await prisma.part.findUnique({
      where: { id },
      include: {
        car: true
      }
    });

    if (!part) {
      console.log('üîß [DEBUG] getPartById: –ó–∞–ø—á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return null;
    }

    console.log('üîß [DEBUG] getPartById: –ó–∞–ø—á–∞—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞:', part.zapchastName);
    return part;

  } catch (error) {
    console.error('üîß [DEBUG] getPartById: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—á–∞—Å—Ç–∏:', error);
    return null;
  }
}
