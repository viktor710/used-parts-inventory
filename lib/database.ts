import { Part, CreatePartInput, UpdatePartInput, Car, CreateCarInput, UpdateCarInput, CarFilters, CarStats } from '@/types';

/**
 * –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
 */
const mockCars: Car[] = [
  {
    id: 'car1',
    brand: 'BMW',
    model: 'E46 325i',
    year: 2003,
    bodyType: 'sedan',
    fuelType: 'gasoline',
    engineVolume: '2.5L',
    transmission: '5MT',
    mileage: 150000,
    vin: 'WBAVB13506PT12345',
    color: '–ß–µ—Ä–Ω—ã–π',
    description: 'BMW E46 325i –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è',
    images: [],
    notes: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Ä–∞–∑–æ–±—Ä–∞–Ω –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏',
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
  },
  {
    id: 'car2',
    brand: 'Toyota',
    model: 'Camry',
    year: 2010,
    bodyType: 'sedan',
    fuelType: 'gasoline',
    engineVolume: '2.4L',
    transmission: '5MT',
    mileage: 120000,
    vin: '4T1BF1FK0CU123456',
    color: '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π',
    description: 'Toyota Camry –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
    images: [],
    notes: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Ä–∞–∑–æ–±—Ä–∞–Ω –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏',
    createdAt: new Date('2024-01-10'),
    updatedAt: new Date('2024-01-10'),
  },
  {
    id: 'car3',
    brand: 'Honda',
    model: 'Civic',
    year: 2015,
    bodyType: 'hatchback',
    fuelType: 'gasoline',
    engineVolume: '1.8L',
    transmission: '6MT',
    mileage: 80000,
    vin: '1HGBH41JXMN123456',
    color: '–ë–µ–ª—ã–π',
    description: 'Honda Civic –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
    images: [],
    notes: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Ä–∞–∑–æ–±—Ä–∞–Ω –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏',
    createdAt: new Date('2024-01-08'),
    updatedAt: new Date('2024-01-08'),
  },
  {
    id: 'car4',
    brand: 'Volkswagen',
    model: 'Golf',
    year: 2012,
    bodyType: 'hatchback',
    fuelType: 'diesel',
    engineVolume: '2.0L',
    transmission: '6MT',
    mileage: 180000,
    vin: 'WVWZZZ1KZAW123456',
    color: '–°–∏–Ω–∏–π',
    description: 'VW Golf —Å –¥–∏–∑–µ–ª—å–Ω—ã–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º',
    images: [],
    notes: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Ä–∞–∑–æ–±—Ä–∞–Ω –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏',
    createdAt: new Date('2024-01-12'),
    updatedAt: new Date('2024-01-12'),
  },
];

/**
 * –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—á–∞—Å—Ç–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏)
 */
const mockParts: Part[] = [
  {
    id: '1',
    zapchastName: '–î–≤–∏–≥–∞—Ç–µ–ª—å BMW M54 2.5L',
    category: 'engine',
    carId: 'car1',
    condition: 'good',
    status: 'available',
    price: 85000,
    description: '–î–≤–∏–≥–∞—Ç–µ–ª—å BMW M54 2.5L –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ–±–µ–≥ 150,000 –∫–º',
    location: '–°–∫–ª–∞–¥ –ê, –ø–æ–ª–∫–∞ 1',
    supplier: '–ê–≤—Ç–æ—Ä–∞–∑–±–æ—Ä–∫–∞ BMW',
    purchaseDate: new Date('2024-01-15'),
    purchasePrice: 65000,
    images: [],
    notes: '–ü—Ä–æ–≤–µ—Ä–µ–Ω, –≥–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –ö–æ–º–ø–ª–µ–∫—Ç –ø–æ–ª–Ω—ã–π.',
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
  },
  {
    id: '2',
    zapchastName: '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á 5MT Toyota',
    category: 'transmission',
    carId: 'car2',
    condition: 'excellent',
    status: 'reserved',
    price: 45000,
    description: '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
    location: '–°–∫–ª–∞–¥ –ë, –ø–æ–ª–∫–∞ 3',
    supplier: 'Toyota Parts',
    purchaseDate: new Date('2024-01-10'),
    purchasePrice: 35000,
    images: [],
    notes: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–∞ —Å—Ç–µ–Ω–¥–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ.',
    createdAt: new Date('2024-01-10'),
    updatedAt: new Date('2024-01-12'),
  },
  {
    id: '3',
    zapchastName: '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ Brembo',
    category: 'brakes',
    carId: 'car1',
    condition: 'excellent',
    status: 'sold',
    price: 8000,
    description: '–ü–µ—Ä–µ–¥–Ω–∏–µ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ Brembo, –Ω–æ–≤—ã–µ',
    location: '–°–∫–ª–∞–¥ –ê, –ø–æ–ª–∫–∞ 5',
    supplier: 'Brembo Official',
    purchaseDate: new Date('2024-01-05'),
    purchasePrice: 6000,
    images: [],
    notes: '–ü—Ä–æ–¥–∞–Ω—ã 15.01.2024',
    createdAt: new Date('2024-01-05'),
    updatedAt: new Date('2024-01-15'),
  },
  {
    id: '4',
    zapchastName: '–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥–Ω–∏–µ KYB',
    category: 'suspension',
    carId: 'car3',
    condition: 'good',
    status: 'available',
    price: 12000,
    description: '–ü–µ—Ä–µ–¥–Ω–∏–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã KYB –¥–ª—è Honda Civic',
    location: '–°–∫–ª–∞–¥ –í, –ø–æ–ª–∫–∞ 2',
    supplier: 'KYB Parts',
    purchaseDate: new Date('2024-01-08'),
    purchasePrice: 9000,
    images: [],
    notes: '–ë/—É, –Ω–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.',
    createdAt: new Date('2024-01-08'),
    updatedAt: new Date('2024-01-08'),
  },
  {
    id: '5',
    zapchastName: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Bosch',
    category: 'electrical',
    carId: 'car4',
    condition: 'fair',
    status: 'available',
    price: 15000,
    description: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Bosch –¥–ª—è VW Golf',
    location: '–°–∫–ª–∞–¥ –ê, –ø–æ–ª–∫–∞ 7',
    supplier: 'Bosch Service',
    purchaseDate: new Date('2024-01-12'),
    purchasePrice: 12000,
    images: [],
    notes: '–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π.',
    createdAt: new Date('2024-01-12'),
    updatedAt: new Date('2024-01-12'),
  },
];

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
class MockDatabaseManager {
  private parts: Part[] = [...mockParts];
  private cars: Car[] = [...mockCars];
  private static instance: MockDatabaseManager;

  private constructor() {
    console.log('üîß [DEBUG] MockDatabaseManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('üîß [DEBUG] MockDatabaseManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π:', this.parts.length);
  }

  /**
   * Singleton –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
   */
  public static getInstance(): MockDatabaseManager {
    if (!MockDatabaseManager.instance) {
      MockDatabaseManager.instance = new MockDatabaseManager();
    }
    return MockDatabaseManager.instance;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  public getParts(page: number = 1, limit: number = 20, filters?: Partial<Part>): Part[] {
    console.log('üîß [DEBUG] MockDatabaseManager.getParts: –ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { page, limit, filters });
    
    let filteredParts = [...this.parts];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (filters?.category) {
      filteredParts = filteredParts.filter(part => part.category === filters.category);
    }
    if (filters?.status) {
      filteredParts = filteredParts.filter(part => part.status === filters.status);
    }
    if (filters?.carId) {
      filteredParts = filteredParts.filter(part => part.carId === filters.carId);
    }
    if (filters?.location) {
      filteredParts = filteredParts.filter(part => 
        part.location.toLowerCase().includes(filters.location!.toLowerCase())
      );
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    filteredParts.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    
    const result = filteredParts.slice(startIndex, endIndex);
    console.log('üîß [DEBUG] MockDatabaseManager.getParts: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π:', result.length);
    
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ ID
   */
  public getPartById(id: string): Part | null {
    return this.parts.find(part => part.id === id) || null;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø—á–∞—Å—Ç–∏
   */
  public createPart(part: CreatePartInput): Part {
    const id = crypto.randomUUID();
    const now = new Date();
    
    const newPart: Part = {
      ...part,
      id,
      createdAt: now,
      updatedAt: now,
    };

    this.parts.unshift(newPart); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    return newPart;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏
   */
  public updatePart(id: string, updates: UpdatePartInput): Part | null {
    const index = this.parts.findIndex(part => part.id === id);
    if (index === -1) return null;

    this.parts[index] = {
      ...this.parts[index],
      ...updates,
      updatedAt: new Date(),
    } as Part;

    return this.parts[index] || null;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏
   */
  public deletePart(id: string): boolean {
    const index = this.parts.findIndex(part => part.id === id);
    if (index === -1) return false;

    this.parts.splice(index, 1);
    return true;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
   */
  public getInventoryStats(): any {
    const totalParts = this.parts.length;
    const availableParts = this.parts.filter(part => part.status === 'available').length;
    const reservedParts = this.parts.filter(part => part.status === 'reserved').length;
    const soldParts = this.parts.filter(part => part.status === 'sold').length;
    const totalValue = this.parts.reduce((sum, part) => sum + part.price, 0);
    const averagePrice = totalParts > 0 ? totalValue / totalParts : 0;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryDistribution: Record<string, number> = {};
    this.parts.forEach(part => {
      categoryDistribution[part.category] = (categoryDistribution[part.category] || 0) + 1;
    });

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    const conditionDistribution: Record<string, number> = {};
    this.parts.forEach(part => {
      conditionDistribution[part.condition] = (conditionDistribution[part.condition] || 0) + 1;
    });

    return {
      totalParts,
      availableParts,
      reservedParts,
      soldParts,
      totalValue,
      averagePrice,
      categoryDistribution,
      conditionDistribution,
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É
   */
  public searchParts(query: string): Part[] {
    const lowerQuery = query.toLowerCase();
    return this.parts.filter(part => {
      const car = this.getCarForPart(part.carId);
      return part.zapchastName.toLowerCase().includes(lowerQuery) ||
             part.description.toLowerCase().includes(lowerQuery) ||
             (car && car.brand.toLowerCase().includes(lowerQuery)) ||
             (car && car.model.toLowerCase().includes(lowerQuery));
    });
  }

  // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò =====

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  public getCars(page: number = 1, limit: number = 20, filters?: CarFilters): Car[] {
    console.log('üîß [DEBUG] MockDatabaseManager.getCars: –ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { page, limit, filters });
    
    let filteredCars = [...this.cars];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (filters?.brand) {
      filteredCars = filteredCars.filter(car => 
        car.brand.toLowerCase().includes(filters.brand!.toLowerCase())
      );
    }
    if (filters?.model) {
      filteredCars = filteredCars.filter(car => 
        car.model.toLowerCase().includes(filters.model!.toLowerCase())
      );
    }
    if (filters?.year) {
      filteredCars = filteredCars.filter(car => car.year === filters.year);
    }
    if (filters?.bodyType) {
      filteredCars = filteredCars.filter(car => car.bodyType === filters.bodyType);
    }
    if (filters?.fuelType) {
      filteredCars = filteredCars.filter(car => car.fuelType === filters.fuelType);
    }
    if (filters?.minMileage) {
      filteredCars = filteredCars.filter(car => car.mileage >= filters.minMileage!);
    }
    if (filters?.maxMileage) {
      filteredCars = filteredCars.filter(car => car.mileage <= filters.maxMileage!);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    filteredCars.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    
    const result = filteredCars.slice(startIndex, endIndex);
    console.log('üîß [DEBUG] MockDatabaseManager.getCars: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', result.length);
    
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID
   */
  public getCarById(id: string): Car | null {
    return this.cars.find(car => car.id === id) || null;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   */
  public createCar(car: CreateCarInput): Car {
    const id = `car${Date.now()}`;
    const now = new Date();
    
    const newCar: Car = {
      ...car,
      id,
      createdAt: now,
      updatedAt: now,
    };

    this.cars.unshift(newCar); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    console.log('üîß [DEBUG] MockDatabaseManager.createCar: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:', newCar);
    return newCar;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   */
  public updateCar(id: string, updates: UpdateCarInput): Car | null {
    const index = this.cars.findIndex(car => car.id === id);
    if (index === -1) return null;

    this.cars[index] = {
      ...this.cars[index],
      ...updates,
      updatedAt: new Date(),
    } as Car;

    console.log('üîß [DEBUG] MockDatabaseManager.updateCar: –û–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å:', this.cars[index]);
    return this.cars[index] || null;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   */
  public deleteCar(id: string): boolean {
    const index = this.cars.findIndex(car => car.id === id);
    if (index === -1) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—á–∞—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
    const relatedParts = this.parts.filter(part => part.carId === id);
    if (relatedParts.length > 0) {
      console.log('üîß [DEBUG] MockDatabaseManager.deleteCar: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –∑–∞–ø—á–∞—Å—Ç—è–º–∏:', relatedParts.length);
      return false;
    }

    this.cars.splice(index, 1);
    console.log('üîß [DEBUG] MockDatabaseManager.deleteCar: –£–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å:', id);
    return true;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
   */
  public getCarStats(): CarStats {
    const totalCars = this.cars.length;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±—Ä–µ–Ω–¥–∞–º
    const brandDistribution: Record<string, number> = {};
    this.cars.forEach(car => {
      brandDistribution[car.brand] = (brandDistribution[car.brand] || 0) + 1;
    });

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º
    const yearDistribution: Record<number, number> = {};
    this.cars.forEach(car => {
      yearDistribution[car.year] = (yearDistribution[car.year] || 0) + 1;
    });

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∫—É–∑–æ–≤–∞
    const bodyTypeDistribution: Record<string, number> = {};
    this.cars.forEach(car => {
      bodyTypeDistribution[car.bodyType] = (bodyTypeDistribution[car.bodyType] || 0) + 1;
    });

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞
    const fuelTypeDistribution: Record<string, number> = {};
    this.cars.forEach(car => {
      fuelTypeDistribution[car.fuelType] = (fuelTypeDistribution[car.fuelType] || 0) + 1;
    });

    return {
      totalCars,
      brandDistribution,
      yearDistribution,
      bodyTypeDistribution,
      fuelTypeDistribution,
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É
   */
  public searchCars(query: string): Car[] {
    const lowerQuery = query.toLowerCase();
    return this.cars.filter(car => 
      car.brand.toLowerCase().includes(lowerQuery) ||
      car.model.toLowerCase().includes(lowerQuery) ||
      car.description.toLowerCase().includes(lowerQuery) ||
      car.vin.toLowerCase().includes(lowerQuery)
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –∑–∞–ø—á–∞—Å—Ç–∏
   */
  public getCarForPart(carId: string): Car | null {
    return this.getCarById(carId);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const db = MockDatabaseManager.getInstance();
