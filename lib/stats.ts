import { prisma } from '@/lib/prisma';
import { InventoryStats } from '@/types';
import { mockInventoryStats, isDatabaseAvailable } from '@/lib/mock-data';

/**
 * –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
export async function getInventoryStats(): Promise<InventoryStats> {
  try {
    console.log('üîß [DEBUG] getInventoryStats: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const dbAvailable = await isDatabaseAvailable();
    
    if (!dbAvailable) {
      console.log('üîß [DEBUG] getInventoryStats: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return mockInventoryStats;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π
    const totalParts = await prisma.part.count().catch(() => 0);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏
    const availableParts = await prisma.part.count({
      where: {
        status: 'available'
      }
    }).catch(() => 0);

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏
    const reservedParts = await prisma.part.count({
      where: {
        status: 'reserved'
      }
    }).catch(() => 0);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏
    const soldParts = await prisma.part.count({
      where: {
        status: 'sold'
      }
    }).catch(() => 0);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π
    const totalValueResult = await prisma.part.aggregate({
      _sum: {
        price: true
      }
    }).catch(() => ({ _sum: { price: 0 } }));

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
    const averagePriceResult = await prisma.part.aggregate({
      _avg: {
        price: true
      }
    }).catch(() => ({ _avg: { price: 0 } }));

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    const totalCars = await prisma.car.count().catch(() => 0);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryDistribution = await prisma.part.groupBy({
      by: ['category'],
      _count: {
        category: true
      }
    }).catch(() => []);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    const conditionDistribution = await prisma.part.groupBy({
      by: ['condition'],
      _count: {
        condition: true
      }
    }).catch(() => []);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const categoryDist: Record<string, number> = {};
    categoryDistribution.forEach(item => {
      categoryDist[item.category] = item._count.category;
    });

    const conditionDist: Record<string, number> = {};
    conditionDistribution.forEach(item => {
      conditionDist[item.condition] = item._count.condition;
    });

    const stats: InventoryStats = {
      totalParts,
      availableParts,
      reservedParts,
      soldParts,
      totalCars,
      totalValue: totalValueResult._sum.price || 0,
      averagePrice: averagePriceResult._avg.price || 0,
      categoryDistribution: categoryDist as Record<string, number>,
      conditionDistribution: conditionDist as Record<string, number>
    };

    console.log('üîß [DEBUG] getInventoryStats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stats);
    return stats;

  } catch (error) {
    console.error('üîß [DEBUG] getInventoryStats: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    console.log('üîß [DEBUG] getInventoryStats: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return mockInventoryStats;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      await prisma.$disconnect();
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    }
  }
}
