import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getToken } from 'next-auth/jwt';

export async function middleware(request: NextRequest) {
  const startTime = Date.now();
  const method = request.method;
  const path = request.nextUrl.pathname;
  const ip = request.ip || 'unknown';

  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  if (process.env['NODE_ENV'] === 'development') {
    console.log(`üîß [MIDDLEWARE] ${method} ${path} - IP: ${ip}`);
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã
  if (path.startsWith('/api/auth')) {
    return NextResponse.next();
  }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö API —Ä–æ—É—Ç–æ–≤
    if (path.startsWith('/api/')) {
      const token = await getToken({ 
        req: request, 
        secret: process.env.NEXTAUTH_SECRET || 'fallback-secret-for-development'
      });

    if (!token) {
      console.log(`üö´ [MIDDLEWARE] –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ ${path}`);
      return NextResponse.json(
        { success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const userRole = token.role as string;
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç —Ä–æ–ª—å ADMIN
    if (method === 'DELETE' && userRole !== 'ADMIN') {
      console.log(`üö´ [MIDDLEWARE] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${path}, —Ä–æ–ª—å: ${userRole}`);
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
        { status: 403 }
      );
    }

    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç —Ä–æ–ª—å MANAGER –∏–ª–∏ –≤—ã—à–µ
    if ((method === 'POST' || method === 'PUT' || method === 'PATCH') && 
        !['MANAGER', 'ADMIN'].includes(userRole)) {
      console.log(`üö´ [MIDDLEWARE] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${path}, —Ä–æ–ª—å: ${userRole}`);
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
        { status: 403 }
      );
    }
  }

  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
  const response = NextResponse.next();
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
  const duration = Date.now() - startTime;
  if (process.env['NODE_ENV'] === 'development') {
    console.log(`üîß [MIDDLEWARE] ${method} ${path} - ${response.status} - ${duration}ms`);
  }

  return response;
}

export const config = {
  matcher: [
    '/api/:path*',
    '/((?!_next/static|_next/image|favicon.ico|auth).*)',
  ],
};
