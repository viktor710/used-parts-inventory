import { NextRequest, NextResponse } from 'next/server';
import { searchZapchasti, getAutocompleteSuggestions } from '@/lib/zapchasti-data';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —Ä–æ—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
export const dynamic = 'force-dynamic';

/**
 * GET /api/zapchasti/search
 * –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function GET(request: NextRequest) {
  console.log('üîß [DEBUG] API GET /api/zapchasti/search: –ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞');
  
  try {
    const { searchParams } = new URL(request.url);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    const query = searchParams.get('q') || '';
    const limit = parseInt(searchParams.get('limit') || '10');
    const type = searchParams.get('type') || 'autocomplete'; // 'search' | 'autocomplete'
    
    console.log('üîß [DEBUG] API GET /api/zapchasti/search: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { query, limit, type });
    
    if (!query.trim()) {
      return NextResponse.json({
        success: true,
        data: {
          results: [],
          total: 0,
          query: '',
        },
      });
    }
    
    let results;
    
    if (type === 'autocomplete') {
      // –î–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è - –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
      results = getAutocompleteSuggestions(query, limit);
    } else {
      // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ - –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results = searchZapchasti(query);
    }
    
    console.log('üîß [DEBUG] API GET /api/zapchasti/search: –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results.length);
    
    return NextResponse.json({
      success: true,
      data: {
        results,
        total: results.length,
        query,
        type,
        limit,
      },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø—á–∞—Å—Ç–µ–π:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
