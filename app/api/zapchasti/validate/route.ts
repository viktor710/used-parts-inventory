import { NextRequest, NextResponse } from 'next/server';
import { isZapchastExists, findZapchastByName } from '@/lib/zapchasti-data';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —Ä–æ—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
export const dynamic = 'force-dynamic';

/**
 * GET /api/zapchasti/validate
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏
 */
export async function GET(request: NextRequest) {
  console.log('üîß [DEBUG] API GET /api/zapchasti/validate: –ó–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
  
  try {
    const { searchParams } = new URL(request.url);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const name = searchParams.get('name') || '';
    
    console.log('üîß [DEBUG] API GET /api/zapchasti/validate: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—á–∞—Å—Ç–∏:', name);
    
    if (!name.trim()) {
      return NextResponse.json({
        success: true,
        data: {
          exists: false,
          name: '',
          message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        },
      });
    }
    
    const exists = isZapchastExists(name);
    const zapchast = exists ? findZapchastByName(name) : null;
    
    console.log('üîß [DEBUG] API GET /api/zapchasti/validate: –†–µ–∑—É–ª—å—Ç–∞—Ç:', { exists, name });
    
    return NextResponse.json({
      success: true,
      data: {
        exists,
        name,
        zapchast,
        message: exists ? '–ó–∞–ø—á–∞—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞' : '–ó–∞–ø—á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ',
      },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
