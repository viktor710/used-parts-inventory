import { NextRequest, NextResponse } from 'next/server';
import { dbService } from '@/lib/database-service';
import { UpdateCarInput } from '@/types';

/**
 * GET /api/cars/[id]
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID
 */
export async function GET(
  _request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üîß [DEBUG] API GET /api/cars/[id]: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –¥–ª—è ID:', params.id);
  
  try {
    const car = await dbService.getCarById(params.id);
    
    if (!car) {
      return NextResponse.json(
        { success: false, error: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({
      success: true,
      data: car,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/cars/[id]
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 */
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üîß [DEBUG] API PUT /api/cars/[id]: –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ID:', params.id);
  
  try {
    const body = await request.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    const existingCar = await dbService.getCarById(params.id);
    if (!existingCar) {
      return NextResponse.json(
        { success: false, error: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    
    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è VIN, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (body.vin && body.vin !== existingCar.vin) {
      const carsWithSameVin = await dbService.searchCars(body.vin);
      const carWithSameVin = carsWithSameVin.find(car => car.vin === body.vin && car.id !== params.id);
      if (carWithSameVin) {
        return NextResponse.json(
          { success: false, error: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º VIN —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
          { status: 400 }
        );
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateData: UpdateCarInput = {
      ...body,
    };
    
    const updatedCar = await dbService.updateCar(params.id, updateData);
    
    if (!updatedCar) {
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è' },
        { status: 500 }
      );
    }
    
    return NextResponse.json({
      success: true,
      data: updatedCar,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/cars/[id]
 * –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 */
export async function DELETE(
  _request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üîß [DEBUG] API DELETE /api/cars/[id]: –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ID:', params.id);
  
  try {
    const success = await dbService.deleteCar(params.id);
    
    if (!success) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –∑–∞–ø—á–∞—Å—Ç—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 400 }
      );
    }
    
    return NextResponse.json({
      success: true,
      message: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
