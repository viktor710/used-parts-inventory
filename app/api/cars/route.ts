import { NextRequest, NextResponse } from 'next/server';
import { dbService } from '@/lib/database-service';
import { CreateCarInput } from '@/types';
import { checkDatabaseConnection } from '@/lib/prisma';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∫–∏
const isBuildTime = false; // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏ –¥–ª—è development

/**
 * GET /api/cars
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export async function GET(request: NextRequest) {
  // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
  if (isBuildTime) {
    return NextResponse.json({
      success: true,
      data: {
        cars: [],
        pagination: {
          page: 1,
          limit: 20,
          total: 0,
          totalPages: 0,
        },
      },
    });
  }

  console.log('üîß [DEBUG] API GET /api/cars: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const isConnected = await checkDatabaseConnection();
    if (!isConnected) {
      console.error('üîß [DEBUG] API GET /api/cars: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 503 }
      );
    }

    const { searchParams } = new URL(request.url);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '20');
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const brand = searchParams.get('brand') || undefined;
    const model = searchParams.get('model') || undefined;
    const year = searchParams.get('year') ? parseInt(searchParams.get('year')!) : undefined;
    const bodyType = searchParams.get('bodyType') || undefined;
    const fuelType = searchParams.get('fuelType') || undefined;
    const minMileage = searchParams.get('minMileage') ? parseInt(searchParams.get('minMileage')!) : undefined;
    const maxMileage = searchParams.get('maxMileage') ? parseInt(searchParams.get('maxMileage')!) : undefined;
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filters: any = {};
    if (brand) filters.brand = brand;
    if (model) filters.model = model;
    if (year) filters.year = year;
    if (bodyType) filters.bodyType = bodyType;
    if (fuelType) filters.fuelType = fuelType;
    if (minMileage) filters.minMileage = minMileage;
    if (maxMileage) filters.maxMileage = maxMileage;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    console.log('üîß [DEBUG] API GET /api/cars: –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', { filters });
    const result = await dbService.getCars(page, limit, filters);
    
    console.log('üîß [DEBUG] API GET /api/cars: –ü–æ–ª—É—á–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π', { 
      count: result.data.length, 
      total: result.total 
    });
    
    return NextResponse.json({
      success: true,
      data: {
        cars: result.data,
        pagination: {
          page: result.page,
          limit: result.limit,
          total: result.total,
          totalPages: result.totalPages,
        },
      },
    });
  } catch (error) {
    console.error('üîß [DEBUG] API GET /api/cars: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if (error instanceof Error && error.message.includes('Prisma')) {
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' },
        { status: 503 }
      );
    }
    
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/cars
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 */
export async function POST(request: NextRequest) {
  // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
  if (isBuildTime) {
    return NextResponse.json(
      { success: false, error: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏' },
      { status: 503 }
    );
  }

  console.log('üîß [DEBUG] API POST /api/cars: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const isConnected = await checkDatabaseConnection();
    if (!isConnected) {
      console.error('üîß [DEBUG] API POST /api/cars: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 503 }
      );
    }

    // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let body: any;
    try {
      body = await request.json();
      console.log('üîß [DEBUG] API POST /api/cars: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', body);
    } catch (parseError) {
      console.error('üîß [DEBUG] API POST /api/cars: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞' },
        { status: 400 }
      );
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['brand', 'model', 'year', 'bodyType', 'fuelType', 'engineVolume', 'transmission', 'mileage', 'vin', 'color'];
    const missingFields = requiredFields.filter(field => !body[field]);
    
    if (missingFields.length > 0) {
      console.error('üîß [DEBUG] API POST /api/cars: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è:', missingFields);
      return NextResponse.json(
        { success: false, error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}` },
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if (typeof body.year !== 'number' || body.year < 1900 || body.year > new Date().getFullYear() + 1) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞' },
        { status: 400 }
      );
    }

    if (typeof body.mileage !== 'number' || body.mileage < 0) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–±–µ–≥' },
        { status: 400 }
      );
    }

    if (typeof body.vin !== 'string' || body.vin.length !== 17) {
      return NextResponse.json(
        { success: false, error: 'VIN –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 17 —Å–∏–º–≤–æ–ª–æ–≤' },
        { status: 400 }
      );
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è VIN (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º)
    try {
      const existingCars = await dbService.searchCars(body.vin);
      const existingCar = existingCars.find(car => car.vin === body.vin);
      if (existingCar) {
        console.error('üîß [DEBUG] API POST /api/cars: VIN —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', body.vin);
        return NextResponse.json(
          { success: false, error: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º VIN —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
          { status: 400 }
        );
      }
    } catch (searchError) {
      console.error('üîß [DEBUG] API POST /api/cars: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ VIN:', searchError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const carData: CreateCarInput = {
      brand: body.brand.trim(),
      model: body.model.trim(),
      year: body.year,
      bodyType: body.bodyType,
      fuelType: body.fuelType,
      engineVolume: body.engineVolume.trim(),
      transmission: body.transmission.trim(),
      mileage: body.mileage,
      vin: body.vin.trim().toUpperCase(),
      color: body.color.trim(),
      description: body.description || '',
      images: body.images || [],
      notes: body.notes || '',
    };
    
    console.log('üîß [DEBUG] API POST /api/cars: –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏:', carData);
    
    const newCar = await dbService.createCar(carData);
    
    console.log('üîß [DEBUG] API POST /api/cars: –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', newCar);
    
    return NextResponse.json({
      success: true,
      data: newCar,
    }, { status: 201 });
  } catch (error) {
    console.error('üîß [DEBUG] API POST /api/cars: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if (error instanceof Error) {
      if (error.message.includes('Prisma')) {
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' },
          { status: 503 }
        );
      }
      
      if (error.message.includes('Unique constraint')) {
        return NextResponse.json(
          { success: false, error: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º VIN —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
          { status: 400 }
        );
      }
      
      if (error.message.includes('Foreign key constraint')) {
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' },
          { status: 400 }
        );
      }
    }
    
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
