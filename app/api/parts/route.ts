import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/database';
import { CreatePartInput } from '@/types';

/**
 * GET /api/parts
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export async function GET(request: NextRequest) {
  console.log('üîß [DEBUG] API GET /api/parts: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  try {
    const { searchParams } = new URL(request.url);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '20');
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const category = searchParams.get('category') || undefined;
    const status = searchParams.get('status') || undefined;
    const carId = searchParams.get('carId') || undefined;
    const location = searchParams.get('location') || undefined;
    const supplier = searchParams.get('supplier') || undefined;
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filters: any = {};
    if (category) filters.category = category;
    if (status) filters.status = status;
    if (carId) filters.carId = carId;
    if (location) filters.location = location;
    if (supplier) filters.supplier = supplier;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    console.log('üîß [DEBUG] API GET /api/parts: –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
    const parts = db.getParts(page, limit, filters);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalParts = db.getInventoryStats().totalParts;
    console.log('üîß [DEBUG] API GET /api/parts: –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π:', parts.length, '–∏–∑', totalParts);
    
    return NextResponse.json({
      success: true,
      data: {
        parts,
        pagination: {
          page,
          limit,
          total: totalParts,
          totalPages: Math.ceil(totalParts / limit),
        },
      },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/parts
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø—á–∞—Å—Ç–∏
 */
export async function POST(request: NextRequest) {
  console.log('üîß [DEBUG] API POST /api/parts: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏');
  
  try {
    const body = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['name', 'category', 'carId', 'condition', 'status', 'price', 'location', 'supplier', 'purchaseDate', 'purchasePrice'];
    const missingFields = requiredFields.filter(field => !body[field]);
    
    if (missingFields.length > 0) {
      return NextResponse.json(
        { success: false, error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}` },
        { status: 400 }
      );
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const partData: CreatePartInput = {
      ...body,
      purchaseDate: new Date(body.purchaseDate),
      images: body.images || [],
      notes: body.notes || '',
      description: body.description || '',
    };
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const newPart = db.createPart(partData);
    
    return NextResponse.json({
      success: true,
      data: newPart,
    }, { status: 201 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
