"use client";

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Header } from '@/components/layout/Header';
import { Sidebar } from '@/components/layout/Sidebar';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { ImageUpload } from '@/components/ui/ImageUpload';
import { BodyType, FuelType, CreateCarInput } from '@/types';
import { 
  Car as CarIcon, 
  ArrowLeft, 
  Save,
  AlertCircle
} from 'lucide-react';
import Link from 'next/link';

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 */
export default function AddCarPage() {
  if (process.env.NODE_ENV === 'development') {
  if (process.env.NODE_ENV === 'development') {
  console.log('üîß [DEBUG] AddCarPage: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è');
};
};
  
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState<CreateCarInput>({
    brand: '',
    model: '',
    year: new Date().getFullYear(),
    bodyType: 'sedan',
    fuelType: 'gasoline',
    engineVolume: '',
    transmission: '',
    mileage: 0,
    vin: '',
    color: '',
    description: '',
    images: [],
    notes: '',
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleInputChange = (field: keyof CreateCarInput, value: any) => {
    if (process.env.NODE_ENV === 'development') {
  console.log('üîß [DEBUG] AddCarPage: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è', field, '–Ω–∞', value);
};
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (process.env.NODE_ENV === 'development') {
  console.log('üîß [DEBUG] AddCarPage: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', formData);
};
      
      const response = await fetch('/api/cars', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (result.success) {
        if (process.env.NODE_ENV === 'development') {
  console.log('üîß [DEBUG] AddCarPage: –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', result.data);
};
        router.push('/cars');
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
        console.error('üîß [DEBUG] AddCarPage: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', result.error);
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
      console.error('üîß [DEBUG] AddCarPage: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  // –û–ø—Ü–∏–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ–≤
  const bodyTypeOptions: { value: BodyType; label: string }[] = [
    { value: 'sedan', label: '–°–µ–¥–∞–Ω' },
    { value: 'hatchback', label: '–•—ç—Ç—á–±–µ–∫' },
    { value: 'wagon', label: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª' },
    { value: 'suv', label: '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫' },
    { value: 'coupe', label: '–ö—É–ø–µ' },
    { value: 'convertible', label: '–ö–∞–±—Ä–∏–æ–ª–µ—Ç' },
    { value: 'pickup', label: '–ü–∏–∫–∞–ø' },
    { value: 'van', label: '–ú–∏–Ω–∏–≤—ç–Ω' },
    { value: 'other', label: '–ü—Ä–æ—á–µ–µ' },
  ];

  const fuelTypeOptions: { value: FuelType; label: string }[] = [
    { value: 'gasoline', label: '–ë–µ–Ω–∑–∏–Ω' },
    { value: 'diesel', label: '–î–∏–∑–µ–ª—å' },
    { value: 'hybrid', label: '–ì–∏–±—Ä–∏–¥' },
    { value: 'electric', label: '–≠–ª–µ–∫—Ç—Ä–æ' },
    { value: 'lpg', label: '–ì–∞–∑' },
    { value: 'other', label: '–ü—Ä–æ—á–µ–µ' },
  ];

  return (
    <div className="min-h-screen bg-neutral-50">
      <Header />
      <div className="flex">
        <Sidebar />
        <main className="flex-1 p-6">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="flex items-center gap-4 mb-6">
            <Link href="/cars">
              <Button variant="outline" size="sm" className="flex items-center gap-2">
                <ArrowLeft className="w-4 h-4" />
                –ù–∞–∑–∞–¥
              </Button>
            </Link>
            <div>
              <h1 className="text-2xl font-bold text-neutral-900">–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å</h1>
              <p className="text-neutral-600 mt-1">
                –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
              </p>
            </div>
          </div>

          {/* –§–æ—Ä–º–∞ */}
          <form onSubmit={handleSubmit} className="max-w-4xl">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CarIcon className="w-5 h-5" />
                    –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2">
                        –ë—Ä–µ–Ω–¥ *
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.brand}
                        onChange={(e) => handleInputChange('brand', e.target.value)}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                        placeholder="BMW"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2">
                        –ú–æ–¥–µ–ª—å *
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.model}
                        onChange={(e) => handleInputChange('model', e.target.value)}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                        placeholder="E46 325i"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2">
                        –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ *
                      </label>
                      <input
                        type="number"
                        required
                        min="1900"
                        max={new Date().getFullYear() + 1}
                        value={formData.year}
                        onChange={(e) => handleInputChange('year', parseInt(e.target.value))}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2">
                        –¶–≤–µ—Ç *
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.color}
                        onChange={(e) => handleInputChange('color', e.target.value)}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                        placeholder="–ß–µ—Ä–Ω—ã–π"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2">
                        –¢–∏–ø –∫—É–∑–æ–≤–∞ *
                      </label>
                      <select
                        required
                        value={formData.bodyType}
                        onChange={(e) => handleInputChange('bodyType', e.target.value as BodyType)}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                      >
                        {bodyTypeOptions.map(option => (
                          <option key={option.value} value={option.value}>
                            {option.label}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2">
                        –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞ *
                      </label>
                      <select
                        required
                        value={formData.fuelType}
                        onChange={(e) => handleInputChange('fuelType', e.target.value as FuelType)}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                      >
                        {fuelTypeOptions.map(option => (
                          <option key={option.value} value={option.value}>
                            {option.label}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
              <Card>
                <CardHeader>
                  <CardTitle>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2">
                        –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è *
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.engineVolume}
                        onChange={(e) => handleInputChange('engineVolume', e.target.value)}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                        placeholder="2.5L"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2">
                        –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è *
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.transmission}
                        onChange={(e) => handleInputChange('transmission', e.target.value)}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                        placeholder="5MT"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 mb-2">
                      –ü—Ä–æ–±–µ–≥ (–∫–º) *
                    </label>
                    <input
                      type="number"
                      required
                      min="0"
                      value={formData.mileage}
                      onChange={(e) => handleInputChange('mileage', parseInt(e.target.value))}
                      className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                      placeholder="150000"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 mb-2">
                      VIN –Ω–æ–º–µ—Ä *
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.vin}
                      onChange={(e) => handleInputChange('vin', e.target.value.toUpperCase())}
                      className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                      placeholder="WBAVB13506PT12345"
                      maxLength={17}
                    />
                  </div>
                </CardContent>
              </Card>

              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</CardTitle>
                </CardHeader>
                <CardContent>
                  <ImageUpload
                    images={formData.images}
                    onImagesChange={(images) => handleInputChange('images', images)}
                    folder="cars"
                    maxImages={10}
                  />
                </CardContent>
              </Card>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 mb-2">
                      –û–ø–∏—Å–∞–Ω–∏–µ
                    </label>
                    <textarea
                      value={formData.description}
                      onChange={(e) => handleInputChange('description', e.target.value)}
                      rows={3}
                      className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                      placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è..."
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 mb-2">
                      –ó–∞–º–µ—Ç–∫–∏
                    </label>
                    <textarea
                      value={formData.notes}
                      onChange={(e) => handleInputChange('notes', e.target.value)}
                      rows={3}
                      className="w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                      placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏..."
                    />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* –û—à–∏–±–∫–∞ */}
            {error && (
              <Card className="mt-6 border-error">
                <CardContent className="p-4">
                  <div className="flex items-center gap-2 text-error">
                    <AlertCircle className="w-5 h-5" />
                    <span>{error}</span>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex items-center justify-end gap-4 mt-6">
              <Link href="/cars">
                <Button variant="outline" type="button">
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </Link>
              <Button type="submit" disabled={loading} className="flex items-center gap-2">
                <Save className="w-4 h-4" />
                {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å'}
              </Button>
            </div>
          </form>
        </main>
      </div>
    </div>
  );
}
